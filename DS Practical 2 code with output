Aim: Write a Program:-
a) To study and execute the linear search method.
b) To study and execute the Binary Search method.


#include <stdio.h>

int linearSearch(int a[], int n, int val) {
    for (int i = 0; i < n; i++) {
        if (a[i] == val) {
            return i; // Return 0-based index
        }
    }
    return -1; // Return -1 if the element is not found
}

int main() {
    int a[] = {70, 40, 30, 11, 57, 41, 25, 14, 52}; // Given array
    int val = 41; // Value to be searched
    int n = sizeof(a) / sizeof(a[0]); // Size of array
    int res = linearSearch(a, n, val); // Store result

    // Print the elements of the array
    printf("The elements of the array are: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\nElement to be searched is: %d\n", val);

    // Check if the element is present and print the result
    if (res == -1) {
        printf("Element is not present in the array.\n");
    } else {
        printf("Element is present at %d position of the array (0-based index).\n", res);
    }

    return 0;
}



-------------------------------------------------**Output**--------------------------------------------------------------

The elements of the array are: 70 40 30 11 57 41 25 14 52 
Element to be searched is: 41
Element is present at 5 position of the array (0-based index).

______________________________________________________***______________________________________________________________


**b) To study and execute the Binary Search method.**

#include <stdio.h>

int binarySearch(int a[], int beg, int end, int val) {
    int mid; // Declare mid inside the function

    if (end >= beg) {
        mid = (beg + end) / 2;

        // If the item to be searched is present at middle
        if (a[mid] == val) {
            return mid; // Return 0-based index
        }
        // If the item to be searched is smaller than mid, it can only be in the left subarray
        else if (a[mid] > val) {
            return binarySearch(a, beg, mid - 1, val);
        }
        // If the item to be searched is greater than mid, it can only be in the right subarray
        else {
            return binarySearch(a, mid + 1, end, val);
        }
    }
    return -1; // Return -1 if the element is not found
}

int main() {
    int a[] = {11, 14, 25, 30, 40, 41, 52, 57, 70}; // Given sorted array
    int val = 40; // Value to be searched
    int n = sizeof(a) / sizeof(a[0]); // Size of array
    int res = binarySearch(a, 0, n - 1, val); // Store result

    // Print the elements of the array
    printf("The elements of the array are: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\nElement to be searched is: %d\n", val);

    // Check if the element is present and print the result
    if (res == -1) {
        printf("Element is not present in the array.\n");
    } else {
        printf("Element is present at %d position of the array (0-based index).\n", res);
    }

    return 0;
}



-------------------------------------------------**Output**--------------------------------------------------------------

The elements of the array are: 11 14 25 30 40 41 52 57 70 
Element to be searched is: 40
Element is present at 4 position of the array (0-based index).

______________________________________________________***______________________________________________________________





















